// Generated by CoffeeScript 1.9.2
(function() {
  var _, baseUrl, gutil, keyCount, merge, request,
    hasProp = {}.hasOwnProperty;

  request = require('request');

  gutil = require('gulp-util');

  merge = require('deep-merge')(function(a, b) {
    return a;
  });

  _ = require('highland');

  baseUrl = "https://phraseapp.com/api/v2";

  keyCount = function(obj) {
    var count, key, val;
    count = 0;
    for (key in obj) {
      if (!hasProp.call(obj, key)) continue;
      val = obj[key];
      if (typeof val === "object") {
        count += keyCount(val);
      } else {
        count += 1;
      }
    }
    return count;
  };

  exports.download = function(options) {
    var base, project, token;
    base = options.base || 'en';
    token = options.accessToken;
    if (token == null) {
      throw new Error("A Phraseapp access token must be present");
    }
    project = options.projectID;
    if (project == null) {
      throw new Error("A Phraseapp project id must be present");
    }
    return _(request(baseUrl + "/projects/" + project + "/locales/?access_token=" + token)).reduce1(_.add).flatMap(function(body) {
      var includeEmpty, locale, locales;
      locales = JSON.parse(body.toString());
      return _((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = locales.length; i < len; i++) {
          locale = locales[i];
          includeEmpty = locale.code === options.base || options.includeEmpty ? "1" : "0";
          results.push({
            code: locale.code,
            url: baseUrl + "/projects/" + project + "/locales/" + locale.code + "/download?file_format=nested_json&include_empty_translations=" + includeEmpty + "&access_token=" + token
          });
        }
        return results;
      })());
    }).map(function(arg) {
      var code, url;
      url = arg.url, code = arg.code;
      return _(request(url)).reduce1(_.add).map(function(body) {
        var text;
        text = JSON.parse(body.toString());
        gutil.log('gulp-phraseapp', "Downloaded " + code + ".json", gutil.colors.cyan((keyCount(text)) + " translations"));
        return {
          code: code,
          text: text
        };
      });
    }).parallel(2).group('code').consume(function(err, data, push, next) {
      var code, out, results, text;
      if (err) {
        push(err);
        return next();
      }
      results = [];
      for (code in data) {
        text = data[code][0].text;
        out = text;
        if (options.base) {
          out = merge(text, data[options.base]);
        }
        push(null, new gutil.File({
          cwd: "",
          base: "",
          path: code + ".json",
          contents: new Buffer(JSON.stringify(out, null, '  '))
        }));
        results.push(next());
      }
      return results;
    });
  };

}).call(this);
