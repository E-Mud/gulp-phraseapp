// Generated by CoffeeScript 1.9.2
(function() {
  var baseUrl, es, gutil, keyCount, merge, request, syncRequest,
    hasProp = {}.hasOwnProperty;

  request = require('request');

  syncRequest = require('sync-request');

  gutil = require('gulp-util');

  es = require('event-stream');

  merge = require('deep-merge')(function(a, b) {
    return a;
  });

  baseUrl = "https://phraseapp.com/api/v1";

  keyCount = function(obj) {
    var count, key, val;
    count = 0;
    for (key in obj) {
      if (!hasProp.call(obj, key)) continue;
      val = obj[key];
      if (typeof val === "object") {
        count += keyCount(val);
      } else {
        count += 1;
      }
    }
    return count;
  };

  module.exports = function(options) {
    var auth_token, base;
    base = options.base || 'en';
    auth_token = options.auth_token;
    return request(baseUrl + "/locales/?auth_token=" + auth_token).pipe(es.parse()).pipe(es.through(function(locales) {
      var code, data, i, includeEmpty, len, locale, out, res, text;
      data = {};
      for (i = 0, len = locales.length; i < len; i++) {
        locale = locales[i];
        if (locale.code === options.base || options.includeEmpty) {
          includeEmpty = "1";
        } else {
          includeEmpty = "0";
        }
        res = syncRequest('GET', baseUrl + "/translations/download.nested_json?locale=" + locale.code + "&include_empty_translations=" + includeEmpty + "&auth_token=" + auth_token);
        data[locale.code] = JSON.parse(res.getBody());
      }
      for (code in data) {
        text = data[code];
        out = text;
        if (options.base) {
          out = merge(text, data[options.base]);
        }
        gutil.log('gulp-phraseapp', "Downloaded " + code + ".json", gutil.colors.cyan((keyCount(text)) + " translations"));
        this.emit('data', new gutil.File({
          cwd: "",
          base: "",
          path: code + ".json",
          contents: new Buffer(JSON.stringify(out, null, '  '))
        }));
      }
      return this.emit('end');
    }));
  };

}).call(this);
